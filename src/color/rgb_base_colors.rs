use palette::*;
use palette::white_point::E;
use super::binned_spectrum::{BinnedSpectrum, BinData};

#[derive(Debug)]
pub struct Bin36;
impl BinData for Bin36 {
    type Spectrum = [f32; 36];
    const WL_0: f32 = 360.0;
    const BIN_WIDTH: f32 = 10.0;
}

/// Values from "An RGB-to-spectrum conversion for reflectances"
type ColorSpectrum = BinnedSpectrum<Bin36>;

static WHITE_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.9995894560031516,
    0.9995912129514997,
    0.9995970390479404,
    0.9995917570575703,
    0.999586204234032,
    0.999579278016298,
    0.9995449908582472,
    0.9995089694485843,
    0.9994703551667624,
    0.9994300968339663,
    0.9993901354792701,
    0.9993536923841492,
    0.9993232710356252,
    0.9993011525940694,
    0.999290909963248,
    0.9992970543233624,
    0.9993251734152301,
    0.9993779586600062,
    0.9994543757744871,
    0.9995503962281013,
    0.9996590976321071,
    0.9997715870413835,
    0.9998779083451392,
    0.9999579027808095,
    0.9999999805651364,
    0.9999947384878511,
    0.9999999907571395,
    0.9999999825368966,
    0.9999779211549361,
    0.9999365082217672,
    0.9998864520843866,
    0.9998319445678804,
    0.9997860207504408,
    0.9997409981308929,
    0.999694729539065,
    0.999694478608827,
]);

static CYAN_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.8977575753324566,
    0.8977650071486812,
    0.8977950239934084,
    0.8979004874722009,
    0.8982522298764107,
    0.8993636429227101,
    0.9029054143128417,
    0.9127091815243725,
    0.9321118445153959,
    0.9615482645841381,
    0.9995762007023096,
    1.0433024949238654,
    1.088396554281229,
    1.1306700632662414,
    1.1663279483863225,
    1.1911140347996658,
    1.200748541880484,
    1.1065938706024578,
    0.9958808479688672,
    0.871607763155252,
    0.7385781549054947,
    0.6032593473637401,
    0.4731732074832838,
    0.35584200504117197,
    0.25735521996452054,
    0.18091391191049633,
    0.12626864441161997,
    0.09016170211419071,
    0.06795870962162383,
    0.0552725761679758,
    0.048477836337423766,
    0.04500795829403277,
    0.043300523558154856,
    0.042510550240261784,
    0.04216687608206856,
    0.04204919464891839,
]);

static MAGENTA_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.9999998919884602,
    0.9999999109877069,
    0.9999950965181483,
    0.9999951412609,
    0.9999958472125047,
    0.9999967153141099,
    0.999999984915895,
    0.9999999821666214,
    0.9999999954579046,
    0.999999993138782,
    0.959263301997528,
    0.8012960288662799,
    0.5790853884846475,
    0.3446875686491697,
    0.14146464713990414,
    0.012000716077390986,
    0.0,
    0.0,
    0.0,
    4.620342833428307e-16,
    0.07466494119362622,
    0.2401523522058578,
    0.45369129569659583,
    0.6695191709100633,
    0.8472667211785151,
    0.9603783805991583,
    0.9999998431339072,
    0.9999999853729901,
    0.9999998908901543,
    0.9999983481354721,
    0.9999999805722014,
    0.9999999777561193,
    0.9999999675891439,
    0.9999949375107601,
    0.9999994788759714,
    0.9986422570809649,
]);

static YELLOW_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    2.426261305961955e-17,
    0.0,
    3.8695582477263524e-18,
    1.093990190657426e-17,
    0.0,
    0.0,
    0.0,
    1.9850933795620365e-17,
    0.0,
    0.03742548343166392,
    0.13183400674194207,
    0.2711798947467757,
    0.43493253888845446,
    0.603498415729649,
    0.761286216426325,
    0.8938666094717131,
    0.9918031765928693,
    1.0441813122793093,
    1.0524830416626525,
    1.02473867890434,
    0.9741577668234321,
    0.9184148941416175,
    0.8780804087935509,
    0.8736981311045345,
    0.9218521112890085,
    1.0311859612399226,
    1.2008709150158248,
    1.1132778442286668,
    1.0641134786632094,
    1.0412401133172107,
    1.0346358983756798,
    1.036970561740133,
    1.04441606057863,
    1.0544236374940945,
    1.0656685483190047,
    1.075011564176067,
]);

static RED_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.08477073715593472,
    0.0845500013818258,
    0.08442526866592562,
    0.08417726807162658,
    0.08318130210088276,
    0.08082967980199762,
    0.07283222314918784,
    0.053992915479616835,
    0.02508579105142315,
    1.4445219218579498e-14,
    5.181858214247535e-15,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1.7748508417646327e-14,
    0.08779962186888929,
    0.37062425216277056,
    0.6986435825162215,
    0.9384831025099442,
    0.9999293749751067,
    0.999964280029311,
    0.9999978382320729,
    0.9999773234733476,
    0.9999999950141405,
    0.9999775014414444,
    0.9999957953452212,
    0.9999390857912899,
    0.9999605974896337,
    0.9999396960789289,
    0.9998898099428674,
]);

static GREEN_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    4.281665463531666e-19,
    5.216472237184468e-19,
    2.91798595012726e-19,
    1.3987871831623717e-16,
    8.462528239877547e-17,
    6.552873359883597e-17,
    9.944161843150874e-18,
    1.664170779770289e-19,
    5.489591521577729e-19,
    2.128166367798868e-19,
    0.040051789429088214,
    0.19612800363728808,
    0.4168758335135289,
    0.6519201090911457,
    0.8597188613802609,
    0.999999150952468,
    0.9999999422852968,
    0.9999962548906636,
    0.99999998878444,
    0.9999999943605331,
    0.918141694940067,
    0.7525777740700714,
    0.5431535404121268,
    0.3324537697420658,
    0.15804770060474813,
    0.044483444133989074,
    1.4618630564466817e-16,
    2.1954282710552298e-16,
    4.475598700246033e-16,
    2.576547444763646e-16,
    1.57233671057072e-16,
    1.1313314539754046e-16,
    1.0182929305609996e-16,
    1.4448938689337742e-16,
    2.199129120885456e-16,
    2.688750856570172e-16,
]);

static BLUE_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.9999985709637567,
    0.9999995970402015,
    0.9999985987262188,
    0.999999181577414,
    0.9999998360619208,
    0.9999999762673332,
    0.9999999858511504,
    0.9999999858395953,
    0.99999240291155,
    0.9536495054337379,
    0.8598345999918422,
    0.7274893828585378,
    0.5731435586337047,
    0.4133244314870316,
    0.26203357386994863,
    0.13323589443481557,
    0.042005102707806344,
    2.5032024765048252e-20,
    1.2437189579174408e-20,
    4.8442918833308805e-17,
    8.772578424535693e-16,
    0.0,
    0.0,
    2.7657374612725793e-20,
    0.003770271587381652,
    0.013380274505679631,
    0.023428264252846335,
    0.031477207162693,
    0.036999115649535515,
    0.04036139665558021,
    0.04223861815302408,
    0.0432185030990724,
    0.04371396252602937,
    0.04395097135062505,
    0.04406259764928839,
    0.044112698846324586,
]);

pub fn rgb_to_spectrum(rgb: Rgb<E, f32>) -> ColorSpectrum {
    let red = rgb.red;
    let green = rgb.green;
    let blue = rgb.blue;
    let mut ret = ColorSpectrum::new([0.0; 36]);
    if red <= green && red <= blue {
        ret += red * WHITE_SPECTRUM;
        if green <= blue {
            ret += (green - red) * CYAN_SPECTRUM;
            ret += (blue - green) * BLUE_SPECTRUM;
        } else {
            ret += (blue - red) * CYAN_SPECTRUM;
            ret += (green - blue) * GREEN_SPECTRUM;
        }
    } else if green <= red && green <= blue {
        ret += green * WHITE_SPECTRUM;
        if red <= blue {
            ret += (red - green) * MAGENTA_SPECTRUM;
            ret += (blue - red) * BLUE_SPECTRUM;
        } else {
            ret += (blue - green) * MAGENTA_SPECTRUM;
            ret += (red - blue) * RED_SPECTRUM;
        }
    } else /* blue <= red && blue <= green */ {
        ret += blue * WHITE_SPECTRUM;
        if red <= green {
            ret += (red - blue) * YELLOW_SPECTRUM;
            ret += (green - red) * GREEN_SPECTRUM;
        } else {
            ret += (green - blue) * YELLOW_SPECTRUM;
            ret += (red - green) * RED_SPECTRUM;
        }
    }
    ret
}
