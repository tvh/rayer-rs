use palette::*;
use palette::white_point::E;
use super::binned_spectrum::{BinnedSpectrum, BinData};

#[derive(Debug)]
pub struct Bin36;
impl BinData for Bin36 {
    type Spectrum = [f32; 36];
    const WL_0: f32 = 360.0;
    const BIN_WIDTH: f32 = 10.0;
}

/// Values from "An RGB-to-spectrum conversion for reflectances"
type ColorSpectrum = BinnedSpectrum<Bin36>;

static WHITE_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.9995030404215534,
    0.9995030714774689,
    0.9995030512658122,
    0.9995030627551332,
    0.9995028688648686,
    0.999502056261457,
    0.9994989228574926,
    0.9994902502507194,
    0.9994727568605554,
    0.999446522733352,
    0.9994139137259692,
    0.9993783773275237,
    0.999344749675806,
    0.9993177817171276,
    0.9993021838137415,
    0.9993037729357165,
    0.9993283570906638,
    0.9993787123339847,
    0.9994537009291211,
    0.9995483284313383,
    0.9996548141028382,
    0.9997630781184327,
    0.9998617043824591,
    0.9999390041546958,
    0.9999847276882365,
    0.9999999809087023,
    0.9999999831353364,
    0.9999999998866955,
    0.999999988808126,
    0.9999999130742862,
    0.9999992679667563,
    0.9999991640399005,
    0.9999998416663406,
    0.9999998543453836,
    0.9999990583349222,
    0.9999983256077716,
]);

static CYAN_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.999863610134545,
    0.9997720564336631,
    0.9999834635478391,
    0.9810836746813998,
    0.9626489385946516,
    0.946393494478308,
    0.9368025437877684,
    0.9425081147244678,
    0.9653675639501622,
    0.9927749752298818,
    0.9999988833900189,
    0.9999997161550758,
    0.9999993865905613,
    0.9999967866793447,
    0.999999273322075,
    0.9999999876800284,
    0.999999989400516,
    0.9999975692910468,
    0.9999992762791129,
    0.999999999945537,
    0.9999999790304577,
    0.9077796971052947,
    0.626935508959515,
    0.30264292213410565,
    0.06459882351254315,
    2.17759869901532e-15,
    3.598623227816619e-14,
    5.799740188320363e-13,
    8.87055619142146e-13,
    2.0495685688519927e-12,
    4.387031902791912e-12,
    3.834966981983791e-14,
    5.803978774419608e-11,
    1.7691016821210494e-08,
    2.5417003557944953e-08,
    3.199461800709334e-08,
]);

static MAGENTA_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.9999169650059165,
    0.9996811408527402,
    0.9982554345412427,
    0.9998359469163941,
    0.9999466526349943,
    0.9999953188073702,
    0.9999814020476071,
    0.9999791813803502,
    0.9999999858798512,
    0.9997173769007806,
    0.9598980015054791,
    0.8012898221676695,
    0.5787801113755936,
    0.34435850544590674,
    0.1412229577302039,
    0.011888656185217592,
    1.6354432749755154e-19,
    2.9018665608207366e-19,
    6.483249762804831e-19,
    1.0260670671513056e-15,
    0.07479246155958554,
    0.24032988280952666,
    0.45383758655242123,
    0.6696007958128039,
    0.8472272545006467,
    0.9602902034982874,
    0.9999545129113971,
    0.9999040114489126,
    0.9999999941183922,
    0.9999994191315507,
    0.9984571404499101,
    0.9998724458084729,
    0.9997300679797356,
    0.9974117991472544,
    0.999992510372572,
    0.9958519465440839,
]);

static YELLOW_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    2.4483429461666942e-15,
    7.674423015130725e-19,
    0.04584185537383434,
    0.13922057254573225,
    0.27120259465059565,
    0.4252846299471673,
    0.5849468073174025,
    0.7362346376732042,
    0.865249685446404,
    0.9570301557334132,
    0.9999921062178575,
    0.9999999999770669,
    0.99999746563527,
    0.9999907320392002,
    0.99998610475955,
    0.9999999853308406,
    0.9999995801054854,
    0.9959979250039276,
    0.9862810750141192,
    0.9761949371764234,
    0.9681490822618023,
    0.9626395893110734,
    0.9592723565822355,
    0.9573990697431409,
    0.9564181326075272,
    0.9559199863491732,
    0.9556811359914414,
    0.9555711522507603,
    0.9555227629926186,
]);

static RED_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.08391506528691274,
    0.08392405261035804,
    0.08384516456221744,
    0.08362684819167424,
    0.08281981858233169,
    0.08029336673822586,
    0.07274614621575448,
    0.05411169623886249,
    0.02518349693941366,
    4.875433442993555e-13,
    0.0,
    1.77427094119494e-18,
    3.095697461422649e-18,
    4.292675305501282e-18,
    1.2089917515247126e-15,
    4.274232442002582e-18,
    4.662936357343838e-18,
    2.081937756994574e-18,
    2.5884095509473424e-18,
    1.4551704014617116e-18,
    1.0012808628724293e-14,
    0.08784855943195509,
    0.3705604939300018,
    0.6986534685340174,
    0.9383969919347394,
    0.9999998293706737,
    0.9999999855879427,
    0.999999980548328,
    0.9999999773268049,
    0.9999999793886387,
    0.9999999997298761,
    0.9999999547779882,
    0.9998658650828697,
    0.9999438768243117,
    0.9999980608649022,
    0.9998969608027863,
]);

static GREEN_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    6.7452746699383575e-19,
    8.976538712055837e-19,
    5.850066486886568e-19,
    0.0,
    0.0,
    4.5107841060238716e-17,
    1.617369805270629e-15,
    0.0,
    2.3162924135070227e-15,
    5.986716189811863e-17,
    0.0396369621227034,
    0.19698294522641288,
    0.4189317851129538,
    0.6533584413498092,
    0.8568891044288001,
    0.9869599981883502,
    0.999999999985219,
    0.9999999855242431,
    0.9999999876749408,
    0.9999998283341696,
    0.9248884532863892,
    0.7592765445937711,
    0.5458291545605388,
    0.33020924437760896,
    0.15269164370272398,
    0.03966089613367078,
    5.278891671566726e-19,
    9.400815991377712e-17,
    4.969882349225914e-16,
    6.431513565081162e-16,
    7.993176164645828e-20,
    3.300055612429033e-19,
    3.730310939955791e-16,
    8.833022978054437e-16,
    1.30417444360071e-15,
    1.167824539062179e-15,
]);

static BLUE_SPECTRUM: ColorSpectrum = ColorSpectrum::new([
    0.9999954238309,
    0.9999775434782774,
    0.9999672134915026,
    0.9999898500285734,
    0.9998330248330604,
    0.9999997526863658,
    0.9999999833428896,
    0.9999999999576031,
    0.9999999448819139,
    0.9536561283107843,
    0.8598359766767636,
    0.7274907269561581,
    0.5731359807743797,
    0.4133181671728766,
    0.2620275916284605,
    0.13323810420560928,
    0.04200882975964667,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    9.789084792024057e-16,
    0.0,
    0.0037720016295360054,
    0.013383016732820727,
    0.023430710655556023,
    0.03147594687027646,
    0.036995722159705126,
    0.040355109000348464,
    0.042223539848712216,
    0.04320440953715263,
    0.04370074561189787,
    0.04393968450546436,
    0.04405195379111247,
    0.04409963174240773,
]);

pub fn rgb_to_spectrum(rgb: Rgb<E, f32>) -> ColorSpectrum {
    let red = rgb.red;
    let green = rgb.green;
    let blue = rgb.blue;
    let mut ret = ColorSpectrum::new([0.0; 36]);
    if red <= green && red <= blue {
        ret += red * WHITE_SPECTRUM;
        if green <= blue {
            ret += (green - red) * CYAN_SPECTRUM;
            ret += (blue - green) * BLUE_SPECTRUM;
        } else {
            ret += (blue - red) * CYAN_SPECTRUM;
            ret += (green - blue) * GREEN_SPECTRUM;
        }
    } else if green <= red && green <= blue {
        ret += green * WHITE_SPECTRUM;
        if red <= blue {
            ret += (red - green) * MAGENTA_SPECTRUM;
            ret += (blue - red) * BLUE_SPECTRUM;
        } else {
            ret += (blue - green) * MAGENTA_SPECTRUM;
            ret += (red - blue) * RED_SPECTRUM;
        }
    } else /* blue <= red && blue <= green */ {
        ret += blue * WHITE_SPECTRUM;
        if red <= green {
            ret += (red - blue) * YELLOW_SPECTRUM;
            ret += (green - red) * GREEN_SPECTRUM;
        } else {
            ret += (green - blue) * YELLOW_SPECTRUM;
            ret += (red - green) * RED_SPECTRUM;
        }
    }
    ret
}
